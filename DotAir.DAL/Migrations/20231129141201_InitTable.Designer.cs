// <auto-generated />
using System;
using DotAir.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotAir.DAL.Migrations
{
    [DbContext(typeof(DotAirContext))]
    [Migration("20231129141201_InitTable")]
    partial class InitTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DotAir.Domain.Entities.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Bruxelles - Zaventem",
                            Code = "BRU",
                            Country = "Belgium"
                        },
                        new
                        {
                            Id = 2,
                            City = "Tokyo - Haneda",
                            Code = "HND",
                            Country = "Japan"
                        });
                });

            modelBuilder.Entity("DotAir.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CancelInsurance")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DepartureFlightId")
                        .HasColumnType("int");

                    b.Property<int>("ExtraLuggageNb")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReturnFlightId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DepartureFlightId");

                    b.HasIndex("ReturnFlightId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DotAir.Domain.Entities.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArrivalAirportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BasePrice")
                        .HasColumnType("int");

                    b.Property<int>("DepartureAirportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaneId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.HasIndex("PlaneId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalAirportId = 1,
                            ArrivalDate = new DateTime(2023, 11, 29, 15, 12, 1, 43, DateTimeKind.Local).AddTicks(9321),
                            BasePrice = 20000,
                            DepartureAirportId = 2,
                            DepartureDate = new DateTime(2023, 11, 28, 15, 12, 1, 43, DateTimeKind.Local).AddTicks(9360),
                            PlaneId = 1,
                            Status = "Planned"
                        });
                });

            modelBuilder.Entity("DotAir.Domain.Entities.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Logins");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DotAir.Domain.Entities.Plane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LegsSpace")
                        .HasColumnType("int");

                    b.Property<string>("PlaneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ref")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatsNb")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Planes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAvailable = true,
                            LegsSpace = 79,
                            PlaneType = "Boeing 747",
                            Ref = "1234",
                            SeatsNb = 42
                        });
                });

            modelBuilder.Entity("DotAir.Domain.Entities.Customer", b =>
                {
                    b.HasBaseType("DotAir.Domain.Entities.Login");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DotAir.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DotAir.Domain.Entities.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotAir.Domain.Entities.Flight", "DepartureFlight")
                        .WithMany("DepartureBookings")
                        .HasForeignKey("DepartureFlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotAir.Domain.Entities.Flight", "ReturnFlight")
                        .WithMany("ReturnBookings")
                        .HasForeignKey("ReturnFlightId");

                    b.Navigation("Customer");

                    b.Navigation("DepartureFlight");

                    b.Navigation("ReturnFlight");
                });

            modelBuilder.Entity("DotAir.Domain.Entities.Flight", b =>
                {
                    b.HasOne("DotAir.Domain.Entities.Airport", "ArrivalAirport")
                        .WithMany("ArrivalFlights")
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotAir.Domain.Entities.Airport", "DepartureAirport")
                        .WithMany("DepartFlights")
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotAir.Domain.Entities.Plane", "Plane")
                        .WithMany("Flights")
                        .HasForeignKey("PlaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");

                    b.Navigation("Plane");
                });

            modelBuilder.Entity("DotAir.Domain.Entities.Customer", b =>
                {
                    b.HasOne("DotAir.Domain.Entities.Login", null)
                        .WithOne()
                        .HasForeignKey("DotAir.Domain.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotAir.Domain.Entities.Airport", b =>
                {
                    b.Navigation("ArrivalFlights");

                    b.Navigation("DepartFlights");
                });

            modelBuilder.Entity("DotAir.Domain.Entities.Flight", b =>
                {
                    b.Navigation("DepartureBookings");

                    b.Navigation("ReturnBookings");
                });

            modelBuilder.Entity("DotAir.Domain.Entities.Plane", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("DotAir.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
